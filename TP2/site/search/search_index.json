{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TP2 - Graphs This TP contains basic data structures like lists and stacks that are ultimately used to implement graph algorithms.","title":"TP2 - Graphs"},{"location":"#tp2-graphs","text":"This TP contains basic data structures like lists and stacks that are ultimately used to implement graph algorithms.","title":"TP2 - Graphs"},{"location":"example/","text":"Hello world alsdljf","title":"Hello world"},{"location":"example/#hello-world","text":"alsdljf","title":"Hello world"},{"location":"overview/","text":"SUP YALL!!! This is a basic overview","title":"Overview"},{"location":"overview/#sup-yall","text":"This is a basic overview","title":"SUP YALL!!!"},{"location":"stack/","text":"Stack We can use the Stack structure as a LIFO container that is used to implement BFS and routines to determine strongly connected components. To instantiate a Stack , we use the function newStack to return a pointer to newly allocated Stack that currently holds no Vertex Stack *s = newStack(); To Add vertices to the stack, we simple call the companion functions pushStack / popStack . Following conventions, pushing to the stack will add a new element on top whereas popping the stack will remove the top element from the stack and then return that element. pushStack(s, 10); pushStack(s, 40); pushStack(s, 13); Vertex v0 = popStack(s); Vertex v1 = popStack(s); Vertex v2 = popStack(s);","title":"Stack"},{"location":"stack/#stack","text":"We can use the Stack structure as a LIFO container that is used to implement BFS and routines to determine strongly connected components. To instantiate a Stack , we use the function newStack to return a pointer to newly allocated Stack that currently holds no Vertex Stack *s = newStack(); To Add vertices to the stack, we simple call the companion functions pushStack / popStack . Following conventions, pushing to the stack will add a new element on top whereas popping the stack will remove the top element from the stack and then return that element. pushStack(s, 10); pushStack(s, 40); pushStack(s, 13); Vertex v0 = popStack(s); Vertex v1 = popStack(s); Vertex v2 = popStack(s);","title":"Stack"}]}